import asyncio
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, FSInputFile
import config

router = Router()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="ü™ô –û –º–æ–Ω–µ—Ç–µ", callback_data="about")],
        [InlineKeyboardButton(text="üí∞ –ö–∞–∫ –∫—É–ø–∏—Ç—å", callback_data="how_to_buy")],
        [InlineKeyboardButton(text="üåê –°—Å—ã–ª–∫–∏", callback_data="links")]
    ])

# –ù–∞–∑–∞–¥
def back_button():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ])

# –°—Å—ã–ª–∫–∏
def links_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîó –°–∞–π—Ç", url="https://vurn.io")],
        [InlineKeyboardButton(text="üì¢ Twitter", url="https://x.com/dmitrij15142")],
        [InlineKeyboardButton(text="üí¨ Telegram", url="https://t.me/VURNINFO_bot")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ])

# /start
@router.message(F.text == "/start")
async def start_handler(message: types.Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>VURN Bot</b>!\n\n"
        "ü™ô <b>VURN</b> ‚Äî –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ —Å–µ—Ç–∏ TON.\n\n"
        "üìå –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ:",
        reply_markup=main_menu(),
        parse_mode=ParseMode.HTML
    )

# –û –º–æ–Ω–µ—Ç–µ
@router.callback_query(F.data == "about")
async def callback_about(call: CallbackQuery):
    await call.message.edit_text(
        "ü™ô <b>–û —Ç–æ–∫–µ–Ω–µ VURN</b>\n\n"
        "VURN ‚Äî –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ —Å–µ—Ç–∏ TON.\n"
        "–ö–æ–Ω—Ç—Ä–∞–∫—Ç: <code>[–≤—Å—Ç–∞–≤—å_–∫–æ–Ω—Ç—Ä–∞–∫—Ç]</code>",
        reply_markup=back_button(),
        parse_mode=ParseMode.HTML
    )

# –ö–∞–∫ –∫—É–ø–∏—Ç—å (—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º)
@router.callback_query(F.data == "how_to_buy")
async def callback_how_to_buy(call: CallbackQuery):
    await call.message.answer(
        "üí∞ <b>–ö–∞–∫ –∫—É–ø–∏—Ç—å VURN:</b>\n\n"
        "1. –£—Å—Ç–∞–Ω–æ–≤–∏ –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—ë–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–µ—Ç–∏ TON (–Ω–∞–ø—Ä–∏–º–µ—Ä, <a href='https://tonkeeper.com/'>Tonkeeper</a>)\n"
        "2. –ü–æ–ø–æ–ª–Ω–∏ –∫–æ—à–µ–ª—ë–∫ –º–æ–Ω–µ—Ç–∞–º–∏ TON\n"
        "3. –ü–µ—Ä–µ–π–¥–∏ –Ω–∞ DEX, –Ω–∞–ø—Ä–∏–º–µ—Ä <a href='https://dedust.io/pools/EQBvLARWhyH1cihbus3WyBbSvXbx0N6SLVlQ4aNKjNE9SqjL'>DeDust.io</a>",
        parse_mode=ParseMode.HTML
    )

    try:
        screenshot = FSInputFile("Screenshot_1.png")
        await call.message.answer_photo(
            screenshot,
            caption="‚¨ÜÔ∏è –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É <b>Swap</b>",
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        await call.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ: {e}")

    await call.message.answer(
        "4. –ù–∞–π–¥–∏ —Ç–æ–∫–µ–Ω VURN –ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É –∏ –æ–±–º–µ–Ω—è–π",
        parse_mode=ParseMode.HTML,
        reply_markup=back_button()
    )

# –°—Å—ã–ª–∫–∏
@router.callback_query(F.data == "links")
async def callback_links(call: CallbackQuery):
    await call.message.edit_text(
        "üåê <b>–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:</b>",
        parse_mode=ParseMode.HTML,
        reply_markup=links_menu()
    )

# –ù–∞–∑–∞–¥
@router.callback_query(F.data == "back")
async def callback_back(call: CallbackQuery):
    await call.message.edit_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>VURN Bot</b>!\n\n"
        "ü™ô <b>VURN</b> ‚Äî –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ —Å–µ—Ç–∏ TON.\n\n"
        "üìå –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ:",
        reply_markup=main_menu(),
        parse_mode=ParseMode.HTML
    )

# –ó–∞–ø—É—Å–∫
async def main():
    bot = Bot(token=config.BOT_TOKEN)
    dp = Dispatcher(storage=MemoryStorage())
    dp.include_router(router)
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
